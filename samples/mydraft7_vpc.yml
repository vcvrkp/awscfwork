# 1 Region 1 VPC 2 Subnet, 1 Instance in each subnet, 1 loabbalancer

Parameters:

  vpcCidr:
    Description: Cidr Block for VPC to be created.
    Type: String
    Default: 10.20.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  subnet1Cidr:
    Description: CidrBlock For the Subnet 2
    Type: String
    Default: 10.20.10.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  subnet2Cidr:
    Description: CidrBlock For the Subnet 2
    Type: String
    Default: 10.20.20.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

  subnet1AZ:
    Description: AZ for subnet 1
    Type: AWS::EC2::AvailabilityZone::Name

  subnet2AZ:
    Description: AZ for subnet 2
    Type: AWS::EC2::AvailabilityZone::Name


Resources:
  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: purpose
        Value: togetalbinstances
  
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: purpose
        Value: togetalbinstances
  
  myAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref subnet1Cidr
      AvailabilityZone: !Ref subnet1AZ
      Tags:
      - Key: purpose
        Value: togetalbinstances
        
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref subnet2Cidr
      AvailabilityZone: !Ref subnet2AZ
      Tags:
      - Key: purpose
        Value: togetalbinstances
  
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
  
  myInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: myAttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref myRouteTable

  SubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref myRouteTable
        SubnetId: !Ref mySubnet1

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myRouteTable
      SubnetId: !Ref mySubnet2


  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: myVPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  # our second EC2 security group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: myVPC
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        
Outputs:
  MyApp1WebServerSecurityGroup:
    Description: The SSH Security Group for our App 1
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Join [ "-",[ !Ref "AWS::StackName", "WSSGroup" ] ]
  MyApp1SSHSecurityGroup:
    Description: The SSH Security Group for our App 2
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "SSHSGroup" ] ]
  VPC:
    Description: VPC Created as part of Stack for the AppName.
    Value: !Ref myVPC
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "VPC" ] ]
  Subnet1:
    Description: Subnets Created as part of App Infrastructure setup1
    Value: !Ref mySubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "Subnet1" ] ]
  Subnet2:
    Description: Subnets Created as part of App Infrastructure setup2.
    Value: !Ref mySubnet2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", "Subnet2" ] ]